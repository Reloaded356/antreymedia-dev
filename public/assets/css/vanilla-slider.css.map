{"version":3,"file":"vanilla-slider.css","sources":["vanilla-slider.scss","../../../vendor/assets/bower_components/neat/core/_neat.scss","../../../vendor/assets/bower_components/neat/core/neat/settings/_settings.scss","../../../vendor/assets/bower_components/neat/core/neat/functions/_retrieve-neat-settings.scss","../../../vendor/assets/bower_components/neat/core/neat/functions/_neat-column-default.scss","../../../vendor/assets/bower_components/neat/core/neat/functions/_neat-column-width.scss","../../../vendor/assets/bower_components/neat/core/neat/functions/_neat-column-ratio.scss","../../../vendor/assets/bower_components/neat/core/neat/functions/_neat-float-direction.scss","../../../vendor/assets/bower_components/neat/core/neat/functions/_neat-merge-defaults.scss","../../../vendor/assets/bower_components/neat/core/neat/functions/_neat-opposite-direction.scss","../../../vendor/assets/bower_components/neat/core/neat/functions/_neat-parse-columns.scss","../../../vendor/assets/bower_components/neat/core/neat/functions/_neat-parse-media.scss","../../../vendor/assets/bower_components/neat/core/neat/functions/_neat-append-grid-visual.scss","../../../vendor/assets/bower_components/neat/core/neat/mixins/_grid-collapse.scss","../../../vendor/assets/bower_components/neat/core/neat/mixins/_grid-column.scss","../../../vendor/assets/bower_components/neat/core/neat/mixins/_grid-container.scss","../../../vendor/assets/bower_components/neat/core/neat/mixins/_grid-media.scss","../../../vendor/assets/bower_components/neat/core/neat/mixins/_grid-push.scss","../../../vendor/assets/bower_components/neat/core/neat/mixins/_grid-shift.scss","../../../vendor/assets/bower_components/neat/core/neat/mixins/_grid-visual.scss","_vars.scss"],"sourcesContent":["@import \"neat\", \"vars\";\n\n$background-color: #ffffff;\n$corner-width: 30px;\n$corner-overlay-pos: $corner-width / 2;\n$slide-transition-duration: 3.5s;\n//generated from http://cubic-bezier.com\n$slide-timinig-function: cubic-bezier(.13,.56,.58,.97);\n$half-width: $corner-width / 2;\n\n* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  width: 100%;\n  background-color: #ffffff;\n    user-select: none\n}\n\n.clearfix:after {\n  content: '';\n  display: block;\n  clear: both;\n}\n\n.slider-container {\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n}\n\n.slider-outer {\n  // transition: all 1.5s cubic-bezier(0.13, 0.56, 0.58, 0.97);\n  height: 100%;\n}\n\n.slide {\n  width: 100%;\n  height: 100vh;\n  min-height: 300px;\n  float: left;\n  overflow: hidden;\n  position: relative;\n}\n\n.slide-thump,\n.slide-details {\n  float: left;\n}\n\n.slide-thump,\n.slide-details {\n  width: 100%;\n  height: 100%;\n  position: relative;\n}\n\n.slide-thump img {\n  width: 100%;\n  height: 100%;\n}\n\n.overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  width: 100%;\n  height: 100%;\n  background-color: transparent;\n  transition: all 3s ease;\n  background-color: rgba(0, 0, 0, 0.7);\n}\n.overlay:before, .overlay:after {\n  content: '';\n  display: block;\n  position: absolute;\n  top: 30px;\n  left: 30px;\n  bottom: 30px;\n  right: 30px;\n  transition: all 1s ease;\n  color: #b1b1b1;\n}\n.overlay:before {\n  border-left: 1px solid;\n  border-right: 1px solid;\n  transform: scale3d(1, 0, 1);\n}\n.overlay:after {\n  border-top: 1px solid;\n  border-bottom: 1px solid;\n  transform: scale3d(0, 1, 1);\n}\n\n.slide-thump .overlay:before,\n.slide-thump .overlay:after {\n  transform: scale3d(1, 1, 1);\n}\n\n.slide-thump:hover .overlay {\n  transition: all 1s ease;\n  background-color: rgba(0, 0, 0, 0.7);\n}\n\n/*--------------\n slide details\n---------------*/\n.slide-details {\n  padding: 15vh 60px;\n  text-align: center;\n  position: absolute;\n  top: 0em;\n  right: 19%;\n  width: 60%;\n  background-color: none;\n  @include grid-media($mobile) {\n    right: 0%;\n    width: 100%;\n  }\n}\n\n.header {\n  overflow: hidden;\n}\n\n.slide-details h2 {\n  position: relative;\n  box-shadow: inset 0 0 0 2px #fff;\n  display: inline-block;\n  padding: 14px 40px;\n  overflow: hidden;\n  color: #fff;\n  @include grid-media($mobile) {\n    width: 100%;\n  }\n}\n.slide-details h2:before, .slide-details h2:after {\n  content: '';\n  display: block;\n  width: 30px;\n  height: 30px;\n  position: absolute;\n  // background-color: #fff;\n  // border: 2px solid #777;\n  border-radius: 30px;\n}\n.slide-details h2:before {\n  top: -15px;\n  left: -15px;\n}\n.slide-details h2:after {\n  top: -15px;\n  left: calc(100% - 15px);\n}\n\n/* corners border */\n.slide-details p {\n  font-size: 1.3em;\n  color: #fff;\n  position: relative;\n  padding: 30px 0px;\n  text-shadow: 2px 2px #777;\n}\n.slide-details p:before {\n  content: '';\n  display: block;\n  width: 100%;\n  height: 3px;\n  background-color: #fff;\n  position: absolute;\n  bottom: 0;\n  transform: scale3d(0.4, 1, 1);\n  transition: all 1s ease;\n}\n.slide-details p:hover:before {\n  transform: scale3d(0.7, 1, 1);\n}\n\n.slide-details button {\n  margin-top: 10vh;\n  padding: 10px 40px;\n  font-size: 1.4em;\n  color: #77b5e2;\n  text-transform: uppercase;\n  background-color: transparent;\n  border: 1px solid #77b5e2;\n  cursor: pointer;\n  transition: background-color 1s ease-in-out, color .7s ease-in-out;\n}\n.slide-details button:hover {\n  background-color: #77b5e2;\n  color: #fff;\n}\n\n.slide-controls {\n    position: absolute;\n    height: 60px;\n    line-height: 50px;\n    text-align: center;\n    font-size: 3em;\n    color: #fff;\n    width: 200px;\n    left: 0;\n    top: 98%;\n    transform: translateY(-50%);\n    left: 42.5%;\n}\n.slide-controls .left,\n.slide-controls .right {\n  position: absolute;\n  top: 0;\n  width: 50%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  cursor: pointer;\n  transition: all 1s ease;\n}\n.slide-controls .left:hover,\n.slide-controls .right:hover {\n  background-color: rgba(0, 0, 0, 0.7);\n}\n\n.slide-controls .right {\n  right: 0;\n}\n\n/* slides aniamtion */\n.slide .slide-thump,\n.slide-details .header,\n.slide-details p {\n  transition: all 1s ease;\n}\n\n.slide .slide-thump {\n  transform: translate3d(0, -100%, 1px);\n  transition-delay: 0s;\n}\n\n.slide-details .header {\n  transform: translate3d(0, 200%, 1px);\n  transition: all 1s linear;\n  transition-delay: 0.75s;\n}\n\n.slide-details p {\n  transform: scale3d(0, 0, 1);\n  transition-delay: 1.5s;\n}\n\n.slide.active .slide-thump,\n.slide.active .slide-details .header {\n  transform: translate3d(0, 0, 1px);\n}\n\n.slide.active .slide-details p {\n  transform: scale3d(1, 1, 1);\n}\n","@charset \"UTF-8\";\n// Neat 2.0.0\n// http://neat.bourbon.io\n// Copyright 2012 thoughtbot, inc.\n// MIT License\n\n@import \"neat/settings/settings\";\n\n@import \"neat/functions/retrieve-neat-settings\";\n@import \"neat/functions/neat-column-default\";\n@import \"neat/functions/neat-column-width\";\n@import \"neat/functions/neat-column-ratio\";\n@import \"neat/functions/neat-float-direction\";\n@import \"neat/functions/neat-merge-defaults\";\n@import \"neat/functions/neat-opposite-direction\";\n@import \"neat/functions/neat-parse-columns\";\n@import \"neat/functions/neat-parse-media\";\n@import \"neat/functions/neat-append-grid-visual\";\n\n@import \"neat/mixins/grid-collapse\";\n@import \"neat/mixins/grid-column\";\n@import \"neat/mixins/grid-container\";\n@import \"neat/mixins/grid-media\";\n@import \"neat/mixins/grid-push\";\n@import \"neat/mixins/grid-shift\";\n@import \"neat/mixins/grid-visual\";\n","@charset \"UTF-8\";\n/// This variable is a sass map that overrides Neat's default grid settings.\n/// Use this to define your project's grid properties incluting gutters and\n/// total column count.\n///\n/// @type map\n///\n/// @group settings\n///\n/// @name Neat grid\n///\n/// @property {number (unitless)} columns [12]\n///   Default number of the total grid columns.\n///\n/// @property {number (with unit)} gutter [20px]\n///   Default grid gutter width between columns.\n///\n/// @example scss\n///   $neat-grid: (\n///     columns: 12,\n///     gutter: 20px,\n///   );\n\n$neat-grid: () !default;\n\n/// If you need multiple grids in a single project, you can do\n/// this by defining a new map stored within a variable of your choosing. This\n/// variable can then be passed directly in to any of Neat's mixins like\n/// [`grid-column(12, $my-custom-grid)`](#grid-column).\n///\n/// Custom grids are especially useful with [`grid-media`](#grid-media). By\n/// defining a `media` attribute within your custom grid, you are able to easily\n/// define gutter width and total column count as well the breakpoint at which\n/// they should activate.\n///\n/// @type map\n///\n/// @group settings\n///\n/// @name Custom grids\n///\n/// @property {number (unitless)} columns [12]\n///   Number of the total grid columns.\n///\n/// @property {number (with unit)} gutter [20px]\n///   Grid gutter width between columns.\n///\n/// @property {number (with unit) | string | null} media [null]\n///   The `@media` definition that is used by the [`grid-media`](#grid-media)\n///   mixin to detirmine the media properties.\n///\n/// @property {color} color [null]\n///   The color used by [`grid-visual`](#grid-visual) to create the guides.\n///\n/// @property {string} direction [ltr]\n///   The float direction used throughout the grid.\n///\n/// @example scss\n///   $my-custom-grid: (\n///     columns: 12,\n///     gutter: 20px,\n///     media: 1200px,\n///     color: rgba(#00d4ff, 0.25),\n///     direction: ltr,\n///   );\n///\n///   $other-custom-grid-for-print: (\n///     columns: 14,\n///     gutter: 1.5rem,\n///     media: print,\n///   );\n///\n\n$neat-custom-grid: () !default;\n","@charset \"UTF-8\";\n/// This function recives a grid map and merges it with Neat's defauls.\n/// It then returns the value of the property that has been passed to it.\n///\n/// @argument {map} $grid\n///\n/// @argument {string} $setting\n///\n/// @return {boolean | color | list | number | string}\n///\n/// @example scss\n///   _retrieve-neat-setting($neat-grid, columns)\n///\n/// @access private\n\n@function _retrieve-neat-setting($grid, $setting) {\n  $_grid-settings: map-merge(_neat-merge-defaults($neat-grid), $grid);\n  @return map-get($_grid-settings, $setting);\n}\n","@charset \"UTF-8\";\n/// Determine if a column count has been given.\n/// If no columns have been given return the grid's total column count.\n///\n/// @argument {map} $grid\n///\n/// @argument {number (unitless) | null} $columns\n///\n/// @return {number}\n///\n/// @example scss\n///   _neat-column-default($neat-grid, 4)\n///\n/// @access private\n\n@function _neat-column-default($grid, $columns) {\n  @if $columns == null {\n    $_grid-columns: _retrieve-neat-setting($grid, columns);\n    @return $_grid-columns;\n  } @else {\n    @return $columns;\n  }\n}\n","@charset \"UTF-8\";\n/// Return a calulated column width that can then be passed in to a `calc()`.\n///\n/// @argument {map} $grid\n///\n/// @argument {number} $columns\n///\n/// @return {string}\n///\n/// @example scss\n///   _neat-column-width($neat-grid, 4)\n///\n/// @access private\n\n@function _neat-column-width($grid, $columns) {\n  $_column-ratio: _neat-column-ratio($grid, $columns);\n  $_gutter: _retrieve-neat-setting($grid, gutter);\n\n  @if $_gutter == 0 {\n    @return unquote(\"#{percentage($_column-ratio)}\");\n  } @else {\n    $_gutter-affordance: $_gutter + ($_gutter * $_column-ratio);\n    @return unquote(\"#{percentage($_column-ratio)} - #{$_gutter-affordance}\");\n  }\n}\n","@charset \"UTF-8\";\n/// Determine the ratio of `$columns` to the total column count.\n/// If `$columns` is more than one value, they are handed to\n/// `_neat-parse-columns()` which will detirmine the total columns and use this\n/// value instead of `total-columns`.\n///\n/// @argument {map} $grid\n///\n/// @argument {number | list} $columns\n///\n/// @return {number}\n///\n/// @example scss\n///   _neat-column-ratio($grid, 3)\n///\n/// @access private\n\n@function _neat-column-ratio($grid, $columns) {\n  @if length($columns) > 1 {\n    @return nth($columns, 1) / _neat-parse-columns($columns);\n  } @else if $columns {\n    @return $columns / _retrieve-neat-setting($grid, columns);\n  }\n}\n","@charset \"UTF-8\";\n/// Return the float direction of the grid.\n///\n/// @argument {map} $grid\n///\n/// @return {string}\n///\n/// @example scss\n///   _neat-float-direction($neat-grid)\n///\n/// @access private\n\n@function _neat-float-direction($grid) {\n  $_direction: _retrieve-neat-setting($grid, direction);\n  $_float-direction: null;\n  @if $_direction == \"ltr\" {\n      $_float-direction: left;\n  } @else if $_direction == \"rtl\" {\n    $_float-direction: right;\n  }\n  @return $_float-direction;\n}\n","@charset \"UTF-8\";\n/// Apply Neat's default properties to undefined values within a map.\n///\n/// @argument {map} $grid\n///\n/// @return {map}\n///\n/// @example scss\n///   _retrieve-neat-setting($neat-grid)\n///\n/// @access private\n\n@function _neat-merge-defaults($grid) {\n  $_merged-grid: map-merge((\n    columns: 12,\n    gutter: 20px,\n    media: null,\n    color: rgba(#00d4ff, 0.25),\n    direction: ltr,\n  ), $grid);\n\n  @return $_merged-grid;\n}\n","@charset \"UTF-8\";\n/// Return the oppoite of the float direction of the grid.\n///\n/// @argument {map} $grid\n///\n/// @return {string}\n///\n/// @example scss\n///   _neat-opposite-direction($neat-grid)\n///\n/// @access private\n\n@function _neat-opposite-direction($grid) {\n  $_direction: _retrieve-neat-setting($grid, direction);\n  $_float-direction: null;\n  @if $_direction == \"ltr\" {\n      $_float-direction: right;\n  } @else if $_direction == \"rtl\" {\n    $_float-direction: left;\n  }\n  @return $_float-direction;\n}\n","@charset \"UTF-8\";\n/// Parse a column count like `3 of 5` and retur the total coloumn count.\n/// This is to allow a shorthand for custom grids without using a settings map.\n///\n///\n/// @argument {list} $span\n///\n/// @return {number}\n///\n/// @example scss\n///   _neat-parse-columns(3 of 5)\n///\n/// @access private\n\n@function _neat-parse-columns($span) {\n  @if length($span) == 3 {\n    $_total-columns: nth($span, 3);\n    @return $_total-columns;\n  } @else if length($span) == 2 or if length($span) >= 3 {\n    @error \"`$column` should contain 2 values, seperated by an `of`\";\n  }\n}\n","@charset \"UTF-8\";\n/// Parse media types. If the property is a string then return it, otherwise\n/// assume screen and min-width.\n///\n/// @argument {string | number (with unit)} $media\n///\n/// @return {number}\n///\n/// @example scss\n///   _neat-parse-media($grid, 1000px)\n///\n/// @access private\n\n@function _neat-parse-media($media) {\n  @if type-of($media) == number {\n    @return \"only screen and (min-width: #{$media})\";\n  } @else if type-of($media) == string {\n    @return \"#{$media}\";\n  }\n}\n","@charset \"UTF-8\";\n/// Append attributes to a the `$_grid-visual` variable in `grid-visual` mixin\n///\n/// @argument {map} $grid\n///\n/// @argument {number (unitless) | null} $columns\n///\n/// @return {number}\n///\n/// @example scss\n///   _neat-column-default($neat-grid, 4)\n///\n/// @access private\n\n@function _neat-append-grid-visual($grid-visual-list, $attributes) {\n  @each $attribute in $attributes {\n    $grid-visual-list: append($grid-visual-list, $attribute, comma);\n  }\n\n  @return $grid-visual-list;\n}\n","@charset \"UTF-8\";\n/// Creates collapsed grid object that consumes the gutters of its container,\n/// for use in nested layouts.\n///\n/// @group features\n///\n/// @name Grid collapse\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to generate the collapsed container.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-collapse;\n///   }\n///\n/// @example css\n///   .element {\n///     float: left;\n///     margin-left: -20px;\n///     margin-right: -20px;\n///     width: calc(100% + 40px);\n///   }\n\n@mixin grid-collapse($grid: $neat-grid) {\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n  @if unit($_grid-gutter) == \"%\" {\n    @warn \"`grid-collapse` is not compatible with percentage based gutters.\";\n  }\n\n  margin-#{_neat-float-direction($grid)}: -($_grid-gutter);\n  margin-#{_neat-opposite-direction($grid)}: -($_grid-gutter);\n  width: calc(100% + #{($_grid-gutter * 2)});\n}\n","@charset \"UTF-8\";\n/// Creates a grid column of requested size.\n///\n/// @group features\n///\n/// @name Grid column\n///\n/// @argument {number (unitless)} $columns [null]\n///   Specifies the number of columns an element should span based on the total\n///   columns of the grid.\n///\n///   This can also be defined in a shorthand syntaxt which also contains the\n///   total column count such as `3 of 5`.\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to generate the column.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-column(3);\n///   }\n///\n/// @example css\n///   .element {\n///     width: calc(25% - 25px);\n///     float: left;\n///     margin-left: 20px;\n///   }\n\n@mixin grid-column($columns: null, $grid: $neat-grid) {\n  $columns: _neat-column-default($grid, $columns);\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n  width: calc(#{_neat-column-width($grid, $columns)});\n  float: _neat-float-direction($grid);\n  margin-#{_neat-float-direction($grid)}: $_grid-gutter;\n}\n","@charset \"UTF-8\";\n/// Creates a grid container with clearfix.\n///\n/// @group features\n///\n/// @name Grid container\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to generate the container.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-container;\n///   }\n///\n/// @example css\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: block;\n///   }\n\n@mixin grid-container($grid: $neat-grid) {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: block;\n  }\n}\n","@charset \"UTF-8\";\n/// `grid-media` allows you to change your layout based on a media query.\n/// For example, an object can span 3 columns on small screens and 6 columns\n/// on large screens.\n///\n/// You can take this a step further and set different grid attributes like\n/// gutter size and total column count for each media query. So, for example,\n/// you can have a `1rem` gutter on small screens, and a `2rem` gutter on large\n/// screens.\n///\n/// @group features\n///\n/// @name Grid media\n///\n/// @argument {map} $grid\n///   The grid to be used within the scope of the block.\n///   This grid should include the `media` property to determine the expression\n///   for the media query.\n///\n/// @content\n///   Grid media will temporarily the override the default grid with the\n///   attributes of the custom grid. This change is scoped to within the mixin\n///   block, and once the mixin has ended the default grid will revert to its\n///   original state as defined by `$neat-grid`. This allows for different\n///   gutter width and column count based on screen size or other properties.\n///\n/// @example scss\n///   $custom-neat-grid: (\n///     columns: 12,\n///     gutter: 50px,\n///     media: 1000px,\n///   );\n///\n///   .element {\n///     @include grid-column(3);\n///\n///     @include grid-media($custom-neat-grid){\n///       @include grid-column(6);\n///     }\n///   }\n///\n/// @example css\n///   .element {\n///     width: calc(25% - 25px);\n///     float: left;\n///     margin-left: 20px;\n///   }\n///\n///   @media only screen and (min-width: 1000px) {\n///     .element {\n///       width: calc(50% - 75px);\n///       float: left;\n///       margin-left: 50px;\n///     }\n///   }\n\n@mixin grid-media($grid) {\n  $_media: _retrieve-neat-setting($grid, media);\n  $_query: _neat-parse-media($_media);\n\n  @media #{$_query} {\n    $_default-neat-grid: $neat-grid;\n    $neat-grid: map-merge($neat-grid, $grid) !global;\n    @content;\n    $neat-grid: $_default-neat-grid !global;\n  }\n}\n","@charset \"UTF-8\";\n/// Push or pull a grid column by manipulating its left margin.\n///\n/// @group features\n///\n/// @name Grid push\n///\n/// @argument {number (unitless)} $push [false]\n///   The number of columns to push the column.\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to detirmine how far to push the column.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-push(3);\n///   }\n///\n/// @example css\n///   .element {\n///     margin-left: calc(25% - 25px + 40px);\n///   }\n\n@mixin grid-push($push: false, $grid: $neat-grid) {\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n  @if $push {\n    $_gutter-affordance: $_grid-gutter * 2;\n    $_margin-value: calc(#{_neat-column-width($grid, $push)} + #{$_gutter-affordance});\n    margin-#{_neat-float-direction($grid)}: $_margin-value;\n  } @else {\n    $_margin-value: _retrieve-neat-setting($grid, gutter);\n    margin-#{_neat-float-direction($grid)}: $_margin-value;\n  }\n}\n","@charset \"UTF-8\";\n/// Shift columns and reorder them within their container using relative\n/// positioning.\n///\n/// @group features\n///\n/// @name Grid shift\n///\n/// @argument {number (unitless)} $shift [false]\n///   The number of columns to shift the column.\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to detirmine how far to shift the column.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-shift(3);\n///   }\n///\n/// @example css\n///   .element {\n///     left: calc(25% - 25px + 20px);\n///     position: relative;\n///   }\n\n@mixin grid-shift($shift: false, $grid: $neat-grid) {\n  @if $shift {\n    $_shift-value: calc(#{_neat-column-width($grid, $shift)} + #{_retrieve-neat-setting($grid, gutter)});\n    #{_neat-float-direction($grid)}: $_shift-value;\n  } @else {\n    #{_neat-float-direction($grid)}: auto;\n  }\n\n  position: relative;\n}\n","@charset \"UTF-8\";\n/// Creates a series of guide lines using the `background-image` property on a\n/// grid container to visualise the columns and gutters of the grid.\n///\n/// @group features\n///\n/// @name Grid visual\n///\n/// @argument {color} $color\n///   The color of the guide lines created.\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid used to determine the guides\n///\n/// @example scss\n///   .element {\n///     @include grid-visual;\n///   }\n///\n/// @example css\n///   .element {\n///     background-image: linear-gradient( … ) ;\n///   }\n\n@mixin grid-visual($color: null, $grid: $neat-grid) {\n  @if not $color {\n    $color: _retrieve-neat-setting($grid, color);\n  }\n\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n  $_grid-visual-object: () !default;\n  $_grid-visual:\n    $color,\n    $color $_grid-gutter,\n    transparent $_grid-gutter,\n  ;\n\n  @for $i from 1 to $_grid-columns {\n    $_grid-visual-local: (\n      #{$i}: \"#{_neat-column-width($grid, $i)} + #{$_grid-gutter}\",\n    );\n\n    $_grid-visual-object: map-merge($_grid-visual-object, $_grid-visual-local);\n  }\n\n  @each $stop, $location in $_grid-visual-object {\n    $_grid-visual-loop-list:\n      transparent calc(#{$location}),\n      $color calc(#{$location}),\n      $color calc(#{$location} + #{$_grid-gutter}),\n      transparent calc(#{$location} + #{$_grid-gutter}),\n    ;\n\n    $_grid-visual: _neat-append-grid-visual($_grid-visual, $_grid-visual-loop-list);\n  }\n\n  $_grid-visual-loop-list:\n      transparent calc(100% - #{$_grid-gutter}),\n      $color calc(100% - #{$_grid-gutter}),\n      $color calc(100%),\n  ;\n\n  $_grid-visual: _neat-append-grid-visual($_grid-visual, $_grid-visual-loop-list);\n\n  background-image: linear-gradient(to right, $_grid-visual);\n}\n","@import \"neat\";\n\n$neat-grid: (\n  columns: 12,\n  gutter: 2em,\n);\n\n$tablet: (\n  columns: 12,\n  gutter: 1em,\n  media: 'screen and (min-width 768px) and (max-width: 1024px)'\n);\n\n\n$mobile: (\n  columns: 12,\n  gutter: 1em,\n  media: 'screen and (min-width: 320px) and (max-width: 767px)'\n);\n"],"names":[],"mappings":"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"}